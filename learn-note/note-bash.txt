#!/bin/bash 是linux需要用它和它后面的表示文件类型

pdf 文档在document中的shell里面

运行hello.sh
$ bash hello
$ sh hello

重定向
$ ls > ls_result
$ ls -l >> ls_result
结果输出重定向到 ls_result 文件中和追加到 ls_result 文件中

$who 查看正在使用的用户
用户数包括console用户和开启的终端个数

$who|wc -l 
其中wc是字数计算 -l (line) -w (word) -c (charactor字符)
｜ (管道)符号在两个程序之间建立管道(pipeline):who的输出 变成了wc的输入

$cat > test         建立文件，使用cat复制终端的输入
who|wc -l           程序的内容
^D                  Ctrl-D 表示 end-of-file
$chmod +x test      让文件拥有执行权限
$./test             执行测试

myvar=this_is_a_long_string
echo $myvar
变量的名称开头是字母或下划线符号 名字和后面的字符串长度任意 变量用来保存字符串值
名字和后面的字符串之间只有等号 不能有空格
想要取出变量的值 在名字前面加上 $

one=first two=second three=third
fullname="first second third"
fullname_a="$first $second $third"
fullname_b=$first$second$third
值中包含空格需要用双引号

$echo hello my girl
$echo -n "Enter your name: "
-n 会省略结尾的换行符号

$echo "enter your name: \c" 这里的转义字符没有作用
$printf "enter your name: \c" 有用了

$program < file 改变标准输入
$program > file 改变标准输出

$program >> file 输出附加到file的结尾处

$tr -c 'string' < test > stdout.sh
    -C
    -d
    -s

$num=2
$echo "this is the $numnd"
$echo "this is the ${num}nd"

****************************************以上例子可查看test 
****************************************以下例子可查看testa
$# 传入脚本的命令行参数个数； 

$* 所有命令行参数值，在各个参数值之间留有空格； 

位置变元 

$0 命令本身（shell文件名） 

$1 第一个命令行参数； 

$2 第二个命令行参数； 

...


****************************************以下例子可查看testb
echo "some text": 将文字内容打印在屏幕上 

ls: 文件列表 

wc –l file; wc -w file; wc -c file: 计算文件行数计算文件中的单词数计算文件中的字符数 

cp sourcefile destfile: 文件拷贝 

mv oldname newname : 重命名文件或移动文件 

rm file: 删除文件 

grep 'pattern' file: 在文件内搜索字符串比如：grep 'searchstring' file.txt 

cut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出.每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，这是两个完全不同的命令

cat file.txt: 输出文件内容到标准输出设备（屏幕）上 

file somefile: 得到文件类型 

read var: 提示用户输入，并将输入赋值给变量 

sort file.txt: 对file.txt文件中的行进行排序

uniq: 删除文本文件中出现的行列比如： sort file.txt | uniq 

“|” 为管道描述符,详见后文。 

expr: 进行数学运算 注意运算符左右都要有空格 
      expr 2 + 3 
      expr 30 / 3
      expr 30 / 3 / 2
      expr 30 \* 3 使用乘号时，必须用反斜线屏蔽其特定含义。因为shell可能会误解显示星号的意义
      expr在循环中用于增量计算
      $LOOP=0
      $LOOP=`expr $LOOP + 1`
      计算非整数，将返回错误
      expr 1.1 + 1
      expr: non-numeric argument

find: 搜索文件比如：根据文件名搜索find . -name filename -print

tee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile 

basename file: 返回不包含路径的文件名比如： basename /bin/tux将返回 tux 

dirname file: 返回文件所在路径比如：dirname /bin/tux将返回 /bin 

head file: 打印文本文件开头几行 

tail file : 打印文本文件末尾几行 

sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。 

不要和shell中的通配符相混淆。比如：将linuxfocus 替换为 LinuxFocus ： 

cat text.file | sed 's/linuxfocus/LinuxFocus/' > newtext.file 

awk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。 

cat file.txt | awk -F, '{print $1 "," $3 }' 

这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerry Miller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA 

2) 概念: 管道, 重定向和 backtick 

这些不是系统命令，但是他们真的很重要。管道 (|) 将一个命令的输出作为另外一个命令的输入。 

grep "hello" file.txt | wc –l 

在file.txt中搜索包含有”hello”的行并计算其行数。 在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。 

重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。 

> 写入文件并覆盖旧文件 

>> 加到文件的尾部，保留旧文件内容。 

` ` 使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。 

命令： 

find . -mtime -1 -type f -print 

用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下脚本： 

#!/bin/sh 

# The ticks are backticks (`) not normal quotes ('): 

tar -zcvf lastmod.tar.gz `find . -mtime -1 -type f -print`

tar –cf 名字.tar 文件 

再重新压缩：tar –rf 名字.tar 文件 

解压缩命令：tar –xvf 名字.tar














