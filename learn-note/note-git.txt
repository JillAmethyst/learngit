mkdir 创建一个文件

git init

git config [--global] user.email ""
git config [--global] user.name ""

vim file.name 编辑一个文件

git add file.name

git commit -m "提交说明"

git status 查看工作区文件们的状态

git diff file.name 查看文件远程和本地的区别

git log 日志

git log --pretty=oneline  漂亮点的书写logs

git reset --hard HEAD^
git reset --hard HEAD^^
git reset --hard HEAD~100
git reset --hard 23974239(版本号)

git reflog 查看每一个记录的回顾 按 q 推出

git checkout -- readme.txt  让这个文件回到最近一次git commit或git add时的状态

git reset HEAD test.sh  撤销全部暂存区的修改

rm file.name 当删除一个文件时 版本库也要删除

git rm file.name

git commit -m "remove file.name"

在本地误删了可以 用 git checkout -- readme.txt 恢复
版本库也误删了 只能退回上一个节点

git remote add origin git@github.com:JillAmethyst/learngit.git

git push -u origin master

在一台电脑上用两个Github账户
1:ssh-keygen -t rsa -C "youremail@example.com"
2:生成时可以把id_rsa 写成 jill_rsa
3:修改config文件
4:ssh-add 
可以参照document中的文档设置

ok 现在在本地的版本库做了提交commit后 运行
git push origin master 就可以把版本库传到远程了 不用加-u


创建分支:
  1: git checkout -b dev 创建一个名为dev的branch
     (
       git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:
       $ git branch dev
       $ git checkout dev
      )
  2: git branch 查看当前有哪些分支

  3: git checkout dev 可以切换到dev的那个分支上
     (在不同的分支上用ls命令可以检验不同分支上内容不同)

  4: git merge dev 合并dev分支到master分支上
     (
        合并后dev的内容就会和master的内容融合,这个融合很是闹心啊
        notice: [修改的内容一定提交] 否则未add和commit的文件会在两个分支出现 很是头疼 立刻文件就乱了
                提交之后各个分支处于独立互不干扰的状态,merge的冲突再去解决
                在master merge dev后,master有冲突,但dev中的内容不变,相当于把dev的内容加入到master中

        冲突长这个样子:
        <<<<<<< HEAD
        Creating a new branch is quick & simple.
        =======
        Creating a new branch is quick AND simple.
        >>>>>>> feature1
     )

  5: git branch -d dev 删除分支 (在冲突没解决的时候不能用这个删除分支)

  6: git branch -D dev 强制删除分支 如果要丢弃一个没有被合并过的分支，可以通过这个强行删除

  7: git log --graph --pretty=oneline --abbrev-commit 用带参数的git log也可以看到分支的合并情况

  8: git merge --no-ff -m "merge with no-ff" dev 
     (
      合并dev分支，请注意--no-ff参数，表示禁用Fast forward
      正常Fast forward 的merge没有merge信息,所以为了显示出合并信息,加入--no-ff参数
     )

  9: git stash 工作不想提交,因为只进行到了一半,可以存储工作现场

  10: git stash apply 一般是用这个恢复工作现场,但stash内容并不删除

  11: git stash drop 删除内容10的内容

  12: git stash pop 恢复工作现场的同时,也删了stash

  13: git remote 查看远程库的信息

  14: git remote -v 显示更详细的信息

  15: git push origin master/dev 推送master/dev分支到远程

  16: 

  












